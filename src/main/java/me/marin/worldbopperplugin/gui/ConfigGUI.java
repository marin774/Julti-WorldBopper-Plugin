package me.marin.worldbopperplugin.gui;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import me.marin.worldbopperplugin.io.WorldBopperSettings;
import me.marin.worldbopperplugin.util.UpdateUtil;
import org.apache.logging.log4j.Level;
import xyz.duncanruns.julti.Julti;
import xyz.duncanruns.julti.gui.JultiGUI;

import javax.swing.*;
import java.awt.*;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.text.NumberFormat;

public class ConfigGUI extends JFrame {

    private boolean isClosed = false;

    private JCheckBox enableWorldbopper;
    private JFormattedTextField savesBuffer;
    private JCheckBox keepWorldsWithNetherCheckBox;
    private JButton saveButton;
    private JPanel mainPanel;
    private JPanel checkForUpdatesPanel;
    private JButton checkForUpdatesButton;

    public ConfigGUI() {
        $$$setupUI$$$();

        this.setContentPane(mainPanel);
        this.setTitle("World Bopper Plugin Config");
        this.pack();
        this.setVisible(true);
        this.setResizable(false);
        this.setLocation(JultiGUI.getJultiGUI().getLocation());

        this.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                isClosed = true;
            }
        });
        updateGUI();

        enableWorldbopper.addActionListener(e -> {
            WorldBopperSettings settings = WorldBopperSettings.getInstance();
            settings.worldbopperEnabled = enableWorldbopper.isSelected();
            WorldBopperSettings.save();
            Julti.log(Level.INFO, settings.worldbopperEnabled ? "WorldBopper is now active." : "WorldBopper is no longer active.");
        });

        keepWorldsWithNetherCheckBox.addActionListener(e -> {
            WorldBopperSettings settings = WorldBopperSettings.getInstance();
            settings.keepNetherWorlds = keepWorldsWithNetherCheckBox.isSelected();
            WorldBopperSettings.save();
            Julti.log(Level.INFO, settings.keepNetherWorlds ? "WorldBopper will now be keeping worlds with nether enters." : "WorldBopper will now be clearing worlds with nether enters.");
        });

        saveButton.addActionListener(e -> {
            Long number = (Long) savesBuffer.getValue();

            WorldBopperSettings settings = WorldBopperSettings.getInstance();

            if (number == null) {
                savesBuffer.setValue(settings.savesBuffer);
                JOptionPane.showMessageDialog(null, "Invalid number: '" + savesBuffer.getText() + "'.");
                return;
            }
            // number has to be between 50-5000
            number = Math.min(5000, number);
            number = Math.max(50, number);

            settings.savesBuffer = number.longValue();
            WorldBopperSettings.save();

            // update visually if number was too small/big
            savesBuffer.setValue(settings.savesBuffer);

            JOptionPane.showMessageDialog(null, "Set world buffer to " + number + ".");
        });

        checkForUpdatesButton.addActionListener(a -> {
            UpdateUtil.checkForUpdatesAndUpdate(false);
        });
    }

    public boolean isClosed() {
        return this.isClosed;
    }

    public void updateGUI() {
        enableWorldbopper.setSelected(WorldBopperSettings.getInstance().worldbopperEnabled);
        keepWorldsWithNetherCheckBox.setSelected(WorldBopperSettings.getInstance().keepNetherWorlds);
        savesBuffer.setValue(WorldBopperSettings.getInstance().savesBuffer);
    }

    private void createUIComponents() {
        NumberFormat numberFormat = NumberFormat.getNumberInstance();
        numberFormat.setParseIntegerOnly(true);
        savesBuffer = new JFormattedTextField(numberFormat);
    }

    // I run this to force intellij to generate code for components
    public static void main(String[] args) {
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout(0, 0));
        checkForUpdatesPanel = new JPanel();
        checkForUpdatesPanel.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        mainPanel.add(checkForUpdatesPanel, BorderLayout.NORTH);
        checkForUpdatesButton = new JButton();
        checkForUpdatesButton.setText("Check for updates");
        checkForUpdatesPanel.add(checkForUpdatesButton);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, BorderLayout.CENTER);
        enableWorldbopper = new JCheckBox();
        enableWorldbopper.setText("Enable WorldBopper?");
        panel1.add(enableWorldbopper, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        keepWorldsWithNetherCheckBox = new JCheckBox();
        keepWorldsWithNetherCheckBox.setText("Keep worlds with nether enters?");
        panel1.add(keepWorldsWithNetherCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        panel1.add(savesBuffer, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Update size");
        panel1.add(saveButton, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Max worlds folder size:");
        panel1.add(label1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
